@page "/details/book/{ID:int}"

@using DSV_Frontend.Services
@using DSV_Frontend.UI_Controls.Display
@using SharedDefinitions.Enumerations
@using SharedDefinitions.Services
@using SharedDefinitions.DTOs

@inject IRouteGuardService RouteGuardService
@inject NavigationManager NavManager
@inject IAssetFetchingService AssetFetchService
@inject IObjectMappingService ObjectMapper

@if (!this.isAllowed)
{
    <FPLoadPage></FPLoadPage>
}
else
{
    if (this.bookData != null && !this.isEditing)
    {
        <div class="mt-3">
            <DSV_Frontend.UI_Controls.FormControls.Buttons.FPEditButton OnClick="@(() => this.isEditing = true)" Text="Bearbeiten"></DSV_Frontend.UI_Controls.FormControls.Buttons.FPEditButton>
        </div>

        <DSV_Frontend.UI_Controls.Display.Book.FPViewBook BookData="@this.bookData"></DSV_Frontend.UI_Controls.Display.Book.FPViewBook>
    }
    else if (this.bookData != null && this.isEditing)
    {
        <DSV_Frontend.UI_Controls.Display.Book.FPEditBook OnCancel="@(() => this.isEditing = false)" OnAfterSave="this.HandleSaveSuccess" BookData="@BookDataDTO.CreateDeepCopy(this.bookData)"></DSV_Frontend.UI_Controls.Display.Book.FPEditBook>
    }
    else
    {
        <FPNoData></FPNoData>
    }
}

@code {
    private bool isEditing;

    private bool isAllowed;

    private BookDataDTO bookData;

    [Parameter]
    public int ID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.isAllowed = false;

        if (!await this.RouteGuardService.VerifySecurityToken())
        {
            this.NavManager.NavigateTo("/login");
        }

        this.isAllowed = true;
        var assetDTO = await this.AssetFetchService.FetchSingle(new SharedDefinitions.DTOs.SingleDatabaseAssetFilterDTO() { ID = this.ID, ListType = ListType.Books });
        this.bookData = this.ObjectMapper.Map<DatabaseAssetDTO, BookDataDTO, DatabaseAssetDTO, BookDataDTO>(assetDTO);
        await base.OnInitializedAsync();
    }

    private async Task HandleSaveSuccess()
    {
        this.isEditing = false;
        var assetDTO = await this.AssetFetchService.FetchSingle(new SharedDefinitions.DTOs.SingleDatabaseAssetFilterDTO() { ID = this.ID, ListType = ListType.Books });
        this.bookData = this.ObjectMapper.Map<DatabaseAssetDTO, BookDataDTO, DatabaseAssetDTO, BookDataDTO>(assetDTO);
    }
}
