@page "/fetchdata"

@using DSV_Frontend.Services
@using DSV_Frontend.ViewModels
@using SharedDefinitions.DTOs
@using SharedDefinitions.Enumerations
@using SharedDefinitions.Services;

@inject IObjectMappingService ObjectMapper 
@inject IAssetFetchingService AssetFetchingService

@if (this.viewModel?.Data?.Count() > 0)
{
    switch (this.ListType)
    {
        case ListType.Books:
            <DSV_Frontend.UI_Controls.Display.FPBookList ViewModel="@(this.ObjectMapper.Map<ICollection<DatabaseAssetDTO>, BookListViewModel, DatabaseAssetDTO, BookDataDTO>(this.viewModel.Data))"></DSV_Frontend.UI_Controls.Display.FPBookList>
        break;
        case ListType.Articles:
            break;
        default:
            break;
    }
}
else
{
    <h1>Keine Daten!</h1>
}

@code {
    private FetchDataViewModel viewModel { get; set; }

    private DatabaseAssetFilterDTO filter { get; set; }

    public ListType ListType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.ListType = ListType.Books;
        this.filter = new DatabaseAssetFilterDTO();
        this.filter.ListType = this.ListType;

        var queryData = await this.AssetFetchingService.FetchAssets(filter);
        this.viewModel = new FetchDataViewModel();
        this.viewModel.Data = queryData;

        await base.OnInitializedAsync();
    }

    private async Task Search()
    {
        this.filter.ListType = this.ListType;
        var queryData = await this.AssetFetchingService.FetchAssets(filter);
        this.viewModel.Data = queryData;
    }
}
