@page "/fetchdata"

@using DSV_Frontend.Services
@using DSV_Frontend.ViewModels
@using SharedDefinitions.DTOs
@using SharedDefinitions.Enumerations
@using SharedDefinitions.Services;

@inject IObjectMappingService ObjectMapper 
@inject IAssetFetchingService AssetFetchingService

<DSV_Frontend.UI_Controls.Display.FPCard Label="Filtern">
    <DSV_Frontend.UI_Controls.FormControls.FPFilterTool ClickCallback="@(async (filter) => await this.Search(filter))">

    </DSV_Frontend.UI_Controls.FormControls.FPFilterTool>
</DSV_Frontend.UI_Controls.Display.FPCard>
@if (this.viewModel?.Data?.Count() > 0)
{
    switch (this.ListType)
    {
        case ListType.Books:
            <DSV_Frontend.UI_Controls.Display.FPBookList ViewModel="@(this.ObjectMapper.Map<ICollection<DatabaseAssetDTO>, BookListViewModel, DatabaseAssetDTO, BookDataDTO>(this.viewModel.Data))"></DSV_Frontend.UI_Controls.Display.FPBookList>
        break;
        case ListType.Articles:
            break;
        default:
            break;
    }
}
else
{
    <h1>Keine Daten!</h1>
}

@code {
    private FetchDataViewModel viewModel { get; set; }

    public ListType ListType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var filter = new DatabaseAssetFilterDTO();
        filter.ListType = this.ListType;
        filter.NoFurtherFilteringRequested = true;

        await this.Search(filter);
        await base.OnInitializedAsync();
    }

    private async Task Search(DatabaseAssetFilterDTO filter)
    {
        var queryData = await this.AssetFetchingService.FetchAssets(filter);
        this.viewModel = new FetchDataViewModel();
        this.viewModel.Data = queryData;
    }
}
