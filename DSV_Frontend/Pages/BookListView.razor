@page "/listview/books"
@inject DSV_Frontend.Services.IWebResourceRequestService resourceRequestService;
@inject Microsoft.Extensions.Configuration.IConfiguration configuration;
@inject SharedDefinitions.Services.IObjectSerializationService serializationService;
@inject DSV_Frontend.Services.IRouteGuardService routeGuard;
@inject NavigationManager NavigationManager;

<Radzen.Blazor.RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="Radzen.FilterMode.Advanced" PageSize="10" AllowPaging="true" AllowSorting="true" Data="@this.BookData" TItem="SharedDefinitions.DTOs.BookDataDTO" ColumnWidth="300px" LogicalFilterOperator="Radzen.LogicalFilterOperator.Or">
    <Columns>
        <RadzenDataGridColumn TItem="SharedDefinitions.DTOs.BookDataDTO" Property="ID" Filterable="true" Title="Laufende Nummer" Frozen="true" Width="50px" TextAlign="Radzen.TextAlign.Center" />
    </Columns>
</Radzen.Blazor.RadzenDataGrid>

@code {
    private IEnumerable<SharedDefinitions.DTOs.BookDataDTO> BookData;

    protected async override Task OnInitializedAsync()
    {
        if (!await this.routeGuard.VerifySecurityToken())
            this.NavigationManager.NavigateTo("/");
        else
        {
            var response = await this.resourceRequestService.GetResourceAsync(string.Concat(this.configuration["BASEURI"], "api/", "DataQuery/", "fetchall/", "books"), null);

            if (response.IsSuccess)
                this.BookData = await this.serializationService.DeserializeMessageAsync<List<SharedDefinitions.DTOs.BookDataDTO>>(response.Data);

            await base.OnInitializedAsync();
        }
    }
}
