@page "/details/article/{ID:int}"

@using DSV_Frontend.Services
@using DSV_Frontend.UI_Controls.Display
@using SharedDefinitions.Enumerations
@using SharedDefinitions.Services
@using SharedDefinitions.DTOs
@using DSV_Frontend.UI_Controls.Display.Article
@using DSV_Frontend.UI_Controls.FormControls.Buttons

@inject IRouteGuardService RouteGuardService
@inject NavigationManager NavManager
@inject IAssetFetchingService AssetFetchService
@inject IObjectMappingService ObjectMapper

@if (!this.isAllowed)
{
    <FPLoadPage></FPLoadPage>
}
else
{
    if (this.articleData != null && !this.isEditing)
    {
        <div class="row mb-3">
            <div class="ml-3">
                <FPReturnButton OnClick="@(() => this.NavManager.NavigateTo("/assetlist"))"></FPReturnButton>
            </div>
            <div class="ml-3">
                <DSV_Frontend.UI_Controls.FormControls.Buttons.FPEditButton OnClick="@(() => this.isEditing = true)" Text="Bearbeiten"></DSV_Frontend.UI_Controls.FormControls.Buttons.FPEditButton>
            </div>
        </div>


        <FPViewArticle ArticleData="@this.articleData"></FPViewArticle>
    }
    else if (this.articleData != null && this.isEditing)
    {
        <FPEditArticle OnCancel="@(() => this.isEditing = false)" OnAfterSave="this.HandleSaveSuccess" ArticleData="@ArticleDataDTO.CreateDeepCopy(this.articleData)"></FPEditArticle>
    }
    else
    {
        <FPNoData></FPNoData>
    }
}

@code {
    private bool isEditing;

    private bool isAllowed;

    private ArticleDataDTO articleData;

    [Parameter]
    public int ID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.isAllowed = false;

        if (!await this.RouteGuardService.VerifySecurityToken())
        {
            this.NavManager.NavigateTo("/login");
        }

        this.isAllowed = true;
        var assetDTO = await this.AssetFetchService.FetchSingle(new SharedDefinitions.DTOs.SingleDatabaseAssetFilterDTO() { ID = this.ID, ListType = ListType.Articles });
        this.articleData = this.ObjectMapper.Map<DatabaseAssetDTO, ArticleDataDTO, DatabaseAssetDTO, ArticleDataDTO>(assetDTO);
        await base.OnInitializedAsync();
    }

    private async Task HandleSaveSuccess()
    {
        this.isEditing = false;
        var assetDTO = await this.AssetFetchService.FetchSingle(new SharedDefinitions.DTOs.SingleDatabaseAssetFilterDTO() { ID = this.ID, ListType = ListType.Articles });
        this.articleData = this.ObjectMapper.Map<DatabaseAssetDTO, ArticleDataDTO, DatabaseAssetDTO, ArticleDataDTO>(assetDTO);
    }
}