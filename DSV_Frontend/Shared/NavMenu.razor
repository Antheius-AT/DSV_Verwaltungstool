@inject DSV_Frontend.Services.IRouteGuardService routeGuardService
@inject AppState AppState
@inject DSV_Frontend.Services.IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">DSV</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="">
                <span class="oi oi-home"></span> Home
            </NavLink>
        </li>
        @if (!this.AppState.IsAuthenticated)
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="login">
                    <span class="oi oi-account-login"></span> Anmelden
                </NavLink>
            </li>
        }
        @if (this.AppState.IsAuthenticated) 
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="assetlist">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Medienliste
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink @onclick="this.LogOut" class="nav-link" href="">
                    <span class="oi oi-account-logout" aria-hidden="true"></span> Logout
                </NavLink>
            </li>
        }
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private bool isVerified;

    private bool isLoggedIn = true;

    protected override async Task OnInitializedAsync()
    {
        this.AppState.StateChanged += this.HandleAppStateChanged;

        await base.OnInitializedAsync();
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void HandleAppStateChanged(object source, EventArgs empty)
    {
        this.InvokeAsync(StateHasChanged);
    }

    private async Task LogOut()
    {
        var success = await this.AuthenticationService.LogoutAsync(this.AppState.Username);
        this.AppState.IsAuthenticated = !success;
        this.NavigationManager.NavigateTo("/login");
        this.AppState.RaiseStateChanged();
    }
}
