@using SharedDefinitions.Enumerations
@using SharedDefinitions.DTOs
@using DSV_Frontend.Services
@using DSV_Frontend.UI_Controls.FormControls
 
@inject IAssetFetchingService AssetFetchService
@inject AppState AppState

<DSV_Frontend.UI_Controls.Display.FPCard Label="Filtermöglichkeiten">
    <HeaderContent>
        <RadzenDropDown Placeholder="Medientyp auswählen" FilterDelay="100" Data="this.listTypes" TValue="ListType" SelectedItemChanged="@(p => this.SelectionChanged(p))"></RadzenDropDown>
    </HeaderContent>
    <ChildContent>
        <div class="row ml-3">

            <div class="col-12 col-lg-4 col-md-6 ml-3 mt-2">
                <FPInputText PlaceHolder="Stichwortsuche.." @bind-Value="this.filter.KeyphraseSearchString"></FPInputText>
            </div>

            @if (this.AppState.ListType == ListType.Books)
            {
                <div class="col-12 col-lg-4 col-md-6 ml-3 mt-2">
                    <FPInputText PlaceHolder="Nach Titel filtern.." @bind-Value="this.filter.BookFilter.Title" @bind-Value:event="ValueChanged"></FPInputText>
                </div>
                <div class="col-12 col-lg-4 col-md-6 ml-3 mt-2">
                    <FPInputText PlaceHolder="Nach Autor filtern.." @bind-Value="this.filter.BookFilter.Author"></FPInputText>
                </div>
                <div class="col-12 col-lg-4 col-md-6 ml-3 mt-2">
                    <FPInputText PlaceHolder="Nach ISBN filtern.." @bind-Value="this.filter.BookFilter.ISBN"></FPInputText>
                </div>
                <div class="col-12 col-lg-4 col-md-6 ml-3 mt-2">
                    <FPInputText PlaceHolder="Nach Herausgeber filtern.." @bind-Value="this.filter.BookFilter.Publisher"></FPInputText>
                </div>
                <div class="col-12 col-lg-4 col-md-6 ml-3 mt-2">
                    <FPInputText PlaceHolder="Nach Verlag filtern.." @bind-Value="this.filter.BookFilter.Editor"></FPInputText>
                </div>
            }

            @if (this.AppState.ListType == ListType.Articles)
            {
                <div class="col-12 col-lg-4 col-md-6 ml-3 mt-2">
                    <FPInputText PlaceHolder="Nach Titel filtern.." @bind-Value="this.filter.ArticleFilter.Title"></FPInputText>
                </div>
                <div class="col-12 col-lg-4 col-md-6 ml-3 mt-2">
                    <FPInputText PlaceHolder="Nach Autor filtern.." @bind-Value="this.filter.ArticleFilter.Author"></FPInputText>
                </div>
                <div class="col-12 col-lg-4 col-md-6 ml-3 mt-2">
                    <FPInputText PlaceHolder="Nach Herausgeber filtern.." @bind-Value="this.filter.ArticleFilter.Editor"></FPInputText>
                </div>
                <div class="col-12 col-lg-4 col-md-6 ml-3 mt-2">
                    <FPInputInteger PlaceHolder="Nach Erscheinungsjahr filtern.." @bind-Value="this.filter.ArticleFilter.PublicationYear"></FPInputInteger>
                </div>
            }

            @if (this.AppState.ListType == ListType.Other)
            {

            }
        </div>
            <div class="row ml-3">
                <div class="col-12 col-lg-4 col-md-6 ml-3 mt-2">
                    <FPButton Text="Suchen" BusyText="Filter werden angewandt" OnClick="@(() => this.ApplyFilter())"></FPButton>
                </div>
            </div>
    </ChildContent> 
</DSV_Frontend.UI_Controls.Display.FPCard>


    @code {
        private IEnumerable<ListType> listTypes = Enum.GetValues<ListType>();

        private MultipleDatabaseAssetFilterDTO filter;

        [Parameter]
        public Action<MultipleDatabaseAssetFilterDTO> InvokeFilterCallback { get; set; }

        protected override Task OnInitializedAsync()
        {
            this.filter = new MultipleDatabaseAssetFilterDTO();
            this.filter.BookFilter = new BookFilterDTO();
            this.filter.ArticleFilter = new ArticleFilterDTO();
            this.filter.ListType = ListType.Books;

            return base.OnInitializedAsync();
        }

        private void SelectionChanged(object parameter)
        {
            if (parameter is not SharedDefinitions.Enumerations.ListType)
                return;

            this.filter.ResetFilter();
            this.filter.ListType = (SharedDefinitions.Enumerations.ListType)parameter;
            this.ApplyFilter();
        }

        private void ApplyFilter()
        {
            this.InvokeFilterCallback?.Invoke(this.filter);
        }
    }
